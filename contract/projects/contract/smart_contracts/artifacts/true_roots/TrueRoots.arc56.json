{
    "name": "TrueRoots",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "byte[]",
                    "name": "admin"
                },
                {
                    "type": "byte[]",
                    "name": "lab"
                },
                {
                    "type": "byte[]",
                    "name": "proc"
                },
                {
                    "type": "uint64",
                    "name": "rewardAsa"
                },
                {
                    "type": "uint64",
                    "name": "baseReward"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_batch",
            "args": [
                {
                    "type": "byte[]",
                    "name": "batch_id"
                },
                {
                    "type": "byte[]",
                    "name": "collector"
                },
                {
                    "type": "uint64",
                    "name": "collected_at"
                },
                {
                    "type": "byte[]",
                    "name": "geo"
                },
                {
                    "type": "byte[]",
                    "name": "species"
                },
                {
                    "type": "uint64",
                    "name": "quantity_kg"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new batch (only once in this simplified version).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_qc",
            "args": [
                {
                    "type": "byte[]",
                    "name": "lab_cert_cid"
                },
                {
                    "type": "uint64",
                    "name": "authenticity_score"
                },
                {
                    "type": "uint64",
                    "name": "qc_at"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Lab verification",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "process_batch",
            "args": [
                {
                    "type": "byte[]",
                    "name": "final_img_cid"
                },
                {
                    "type": "byte[]",
                    "name": "consumer_qr"
                },
                {
                    "type": "uint64",
                    "name": "proc_at"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Processing step",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "ship_batch",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mark shipped",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "reward_distributed",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mark rewards distributed (ASA transfer done in grouped txn externally)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_auth",
            "args": [
                {
                    "type": "byte[]",
                    "name": "new_lab"
                },
                {
                    "type": "byte[]",
                    "name": "new_proc"
                },
                {
                    "type": "uint64",
                    "name": "new_base_reward"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update roles / base reward",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "provenance",
            "args": [],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Read-only provenance snapshot (concatenate selected fields); frontend decodes",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 12
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWRtaW4="
                },
                "auth_lab": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YXV0aF9sYWI="
                },
                "auth_proc": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YXV0aF9wcm9j"
                },
                "reward_asa": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmV3YXJkX2FzYQ=="
                },
                "base_reward": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YmFzZV9yZXdhcmQ="
                },
                "reward_done": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmV3YXJkX2RvbmU="
                },
                "batch_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YmF0Y2hfaWQ="
                },
                "collector": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Y29sbGVjdG9y"
                },
                "collected_at": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29sbGVjdGVkX2F0"
                },
                "geo": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2Vv"
                },
                "species": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "c3BlY2llcw=="
                },
                "quantity_kg": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cXVhbnRpdHlfa2c="
                },
                "status": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "c3RhdHVz"
                },
                "lab_cert_cid": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bGFiX2NlcnRfY2lk"
                },
                "qc_at": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cWNfYXQ="
                },
                "authenticity_score": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXV0aGVudGljaXR5X3Njb3Jl"
                },
                "processor": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cHJvY2Vzc29y"
                },
                "proc_at": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHJvY19hdA=="
                },
                "final_img_cid": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "ZmluYWxfaW1nX2NpZA=="
                },
                "consumer_qr": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Y29uc3VtZXJfcXI="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        516
                    ],
                    "errorMessage": "E_ADMIN"
                },
                {
                    "pc": [
                        528
                    ],
                    "errorMessage": "E_EXISTS"
                },
                {
                    "pc": [
                        610
                    ],
                    "errorMessage": "E_LAB"
                },
                {
                    "pc": [
                        706,
                        777
                    ],
                    "errorMessage": "E_PROC"
                },
                {
                    "pc": [
                        531
                    ],
                    "errorMessage": "E_QTY"
                },
                {
                    "pc": [
                        804
                    ],
                    "errorMessage": "E_REWARD_DONE"
                },
                {
                    "pc": [
                        648
                    ],
                    "errorMessage": "E_SCORE"
                },
                {
                    "pc": [
                        642,
                        714,
                        785,
                        836
                    ],
                    "errorMessage": "E_STATUS"
                },
                {
                    "pc": [
                        238,
                        267,
                        295,
                        307,
                        319,
                        347,
                        373,
                        417
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        421
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        241,
                        270,
                        298,
                        310,
                        322,
                        350,
                        376
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        514,
                        608,
                        614,
                        624,
                        704,
                        710,
                        761,
                        771,
                        781,
                        802,
                        808,
                        818,
                        828,
                        874,
                        880,
                        888,
                        896,
                        914,
                        944,
                        974
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMvdHJ1ZV9yb290cy9jb250cmFjdC5hbGdvLnRzOjpUcnVlUm9vdHMuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJ1ZV9yb290cy9jb250cmFjdC5hbGdvLnRzOjE4MwogICAgLy8gcmV0dXJuIHRydWU7CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmEQZzdGF0dXMBfAlhdXRoX3Byb2MFYWRtaW4IYXV0aF9sYWILcmV3YXJkX2RvbmUIYmF0Y2hfaWQMbGFiX2NlcnRfY2lkC1FDX1ZFUklGSUVEDWZpbmFsX2ltZ19jaWQLY29uc3VtZXJfcXIJUFJPQ0VTU0VEC2Jhc2VfcmV3YXJkA2dlbwdzcGVjaWVzCUNPTExFQ1RFRAdTSElQUEVEMRtBAD+CCARk8JrfBNI+FMgEmBGFrASHgQCYBPsyStwEc5TYpAT8Zx9mBHXxny82GgCOCAC1AIkAbwBTAEcAOwAfAAIiQzEZFEQxGESIAm5JFRZXBgJMUIAEFR98dUxQsCNDMRkURDEYRDYaAVcCADYaAlcCADYaAxeIAiwjQzEZFEQxGESIAe0jQzEZFEQxGESIAbojQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXiAFiI0MxGRREMRhENhoBVwIANhoCFzYaAxeIAOcjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXNhoEVwIANhoFVwIANhoGF4gAaiNDMRkURDEYFEQ2GgFXAgA2GgJXAgA2GgNXAgA2GgQXNhoFF4gAAiNDigUAK4v7ZycEi/xnKov9Z4AKcmV3YXJkX2FzYYv+ZycMi/9nJwUiZyiAC0lOSVRJQUxJWkVEZ4kxACIrZUQSRImKBgAiJwZlRQEURIv/RCcGi/pngAljb2xsZWN0b3KL+2eADGNvbGxlY3RlZF9hdIv8ZycNi/1nJw6L/meAC3F1YW50aXR5X2tni/9nKCcPZ4mKAwAxACInBGVEEkQiKGVEJw8SQAAUIihlRIAKUUNfUEVORElORxJBADMjRIv+gWQORCcHi/1ngBJhdXRoZW50aWNpdHlfc2NvcmWL/meABXFjX2F0i/9nKCcIZ4kiQv/KigMAMQAiKmVEEkQiKGVEJwgSRCcJi/1nJwqL/meAB3Byb2NfYXSL/2eACXByb2Nlc3NvcjEAZygnC2eJMQAiK2VEEkAACjEAIiplRBJBAA8jRCIoZUQnCxJEKCcQZ4kiQv/uiP7fIicFZUQURCIoZUQnCBJAABQiKGVEJwsSQAAKIihlRCcQEkEAByNEJwUjZ4kiQv/2igMAiP6pJwSL/Wcqi/5nJwyL/2eJigABIicGZUQpUCIoZURQKVAiJw5lRFApUCInDWVEUClQSSInB2VFAUEACyInB2VEiwBMUIwBiwEpUEmMACInCWVFAUyMAUEACyInCWVEiwBMUIwBiwEpUEmMACInCmVFAUyMAUEACyInCmVEiwBMUIwBiwGMAIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}