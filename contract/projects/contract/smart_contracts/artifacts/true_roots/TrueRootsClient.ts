/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"TrueRoots","structs":{},"methods":[{"name":"createApplication","args":[{"type":"byte[]","name":"admin"},{"type":"byte[]","name":"lab"},{"type":"byte[]","name":"proc"},{"type":"uint64","name":"rewardAsa"},{"type":"uint64","name":"baseReward"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"create_batch","args":[{"type":"byte[]","name":"batch_id"},{"type":"byte[]","name":"collector"},{"type":"uint64","name":"collected_at"},{"type":"byte[]","name":"geo"},{"type":"byte[]","name":"species"},{"type":"uint64","name":"quantity_kg"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new batch (only once in this simplified version).","events":[],"recommendations":{}},{"name":"verify_qc","args":[{"type":"byte[]","name":"lab_cert_cid"},{"type":"uint64","name":"authenticity_score"},{"type":"uint64","name":"qc_at"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Lab verification","events":[],"recommendations":{}},{"name":"process_batch","args":[{"type":"byte[]","name":"final_img_cid"},{"type":"byte[]","name":"consumer_qr"},{"type":"uint64","name":"proc_at"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Processing step","events":[],"recommendations":{}},{"name":"ship_batch","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mark shipped","events":[],"recommendations":{}},{"name":"reward_distributed","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mark rewards distributed (ASA transfer done in grouped txn externally)","events":[],"recommendations":{}},{"name":"update_auth","args":[{"type":"byte[]","name":"new_lab"},{"type":"byte[]","name":"new_proc"},{"type":"uint64","name":"new_base_reward"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update roles / base reward","events":[],"recommendations":{}},{"name":"provenance","args":[],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Read-only provenance snapshot (concatenate selected fields); frontend decodes","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":8,"bytes":12},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="},"auth_lab":{"keyType":"AVMString","valueType":"AVMBytes","key":"YXV0aF9sYWI="},"auth_proc":{"keyType":"AVMString","valueType":"AVMBytes","key":"YXV0aF9wcm9j"},"reward_asa":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkX2FzYQ=="},"base_reward":{"keyType":"AVMString","valueType":"AVMUint64","key":"YmFzZV9yZXdhcmQ="},"reward_done":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkX2RvbmU="},"batch_id":{"keyType":"AVMString","valueType":"AVMBytes","key":"YmF0Y2hfaWQ="},"collector":{"keyType":"AVMString","valueType":"AVMBytes","key":"Y29sbGVjdG9y"},"collected_at":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29sbGVjdGVkX2F0"},"geo":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z2Vv"},"species":{"keyType":"AVMString","valueType":"AVMBytes","key":"c3BlY2llcw=="},"quantity_kg":{"keyType":"AVMString","valueType":"AVMUint64","key":"cXVhbnRpdHlfa2c="},"status":{"keyType":"AVMString","valueType":"AVMBytes","key":"c3RhdHVz"},"lab_cert_cid":{"keyType":"AVMString","valueType":"AVMBytes","key":"bGFiX2NlcnRfY2lk"},"qc_at":{"keyType":"AVMString","valueType":"AVMUint64","key":"cWNfYXQ="},"authenticity_score":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXV0aGVudGljaXR5X3Njb3Jl"},"processor":{"keyType":"AVMString","valueType":"AVMBytes","key":"cHJvY2Vzc29y"},"proc_at":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJvY19hdA=="},"final_img_cid":{"keyType":"AVMString","valueType":"AVMBytes","key":"ZmluYWxfaW1nX2NpZA=="},"consumer_qr":{"keyType":"AVMString","valueType":"AVMBytes","key":"Y29uc3VtZXJfcXI="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[516],"errorMessage":"E_ADMIN"},{"pc":[528],"errorMessage":"E_EXISTS"},{"pc":[610],"errorMessage":"E_LAB"},{"pc":[706,777],"errorMessage":"E_PROC"},{"pc":[531],"errorMessage":"E_QTY"},{"pc":[804],"errorMessage":"E_REWARD_DONE"},{"pc":[648],"errorMessage":"E_SCORE"},{"pc":[642,714,785,836],"errorMessage":"E_STATUS"},{"pc":[238,267,295,307,319,347,373,417],"errorMessage":"OnCompletion is not NoOp"},{"pc":[421],"errorMessage":"can only call when creating"},{"pc":[241,270,298,310,322,350,376],"errorMessage":"can only call when not creating"},{"pc":[514,608,614,624,704,710,761,771,781,802,808,818,828,874,880,888,896,914,944,974],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMvdHJ1ZV9yb290cy9jb250cmFjdC5hbGdvLnRzOjpUcnVlUm9vdHMuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJ1ZV9yb290cy9jb250cmFjdC5hbGdvLnRzOjE4MwogICAgLy8gcmV0dXJuIHRydWU7CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmEQZzdGF0dXMBfAlhdXRoX3Byb2MFYWRtaW4IYXV0aF9sYWILcmV3YXJkX2RvbmUIYmF0Y2hfaWQMbGFiX2NlcnRfY2lkC1FDX1ZFUklGSUVEDWZpbmFsX2ltZ19jaWQLY29uc3VtZXJfcXIJUFJPQ0VTU0VEC2Jhc2VfcmV3YXJkA2dlbwdzcGVjaWVzCUNPTExFQ1RFRAdTSElQUEVEMRtBAD+CCARk8JrfBNI+FMgEmBGFrASHgQCYBPsyStwEc5TYpAT8Zx9mBHXxny82GgCOCAC1AIkAbwBTAEcAOwAfAAIiQzEZFEQxGESIAm5JFRZXBgJMUIAEFR98dUxQsCNDMRkURDEYRDYaAVcCADYaAlcCADYaAxeIAiwjQzEZFEQxGESIAe0jQzEZFEQxGESIAbojQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXiAFiI0MxGRREMRhENhoBVwIANhoCFzYaAxeIAOcjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXNhoEVwIANhoFVwIANhoGF4gAaiNDMRkURDEYFEQ2GgFXAgA2GgJXAgA2GgNXAgA2GgQXNhoFF4gAAiNDigUAK4v7ZycEi/xnKov9Z4AKcmV3YXJkX2FzYYv+ZycMi/9nJwUiZyiAC0lOSVRJQUxJWkVEZ4kxACIrZUQSRImKBgAiJwZlRQEURIv/RCcGi/pngAljb2xsZWN0b3KL+2eADGNvbGxlY3RlZF9hdIv8ZycNi/1nJw6L/meAC3F1YW50aXR5X2tni/9nKCcPZ4mKAwAxACInBGVEEkQiKGVEJw8SQAAUIihlRIAKUUNfUEVORElORxJBADMjRIv+gWQORCcHi/1ngBJhdXRoZW50aWNpdHlfc2NvcmWL/meABXFjX2F0i/9nKCcIZ4kiQv/KigMAMQAiKmVEEkQiKGVEJwgSRCcJi/1nJwqL/meAB3Byb2NfYXSL/2eACXByb2Nlc3NvcjEAZygnC2eJMQAiK2VEEkAACjEAIiplRBJBAA8jRCIoZUQnCxJEKCcQZ4kiQv/uiP7fIicFZUQURCIoZUQnCBJAABQiKGVEJwsSQAAKIihlRCcQEkEAByNEJwUjZ4kiQv/2igMAiP6pJwSL/Wcqi/5nJwyL/2eJigABIicGZUQpUCIoZURQKVAiJw5lRFApUCInDWVEUClQSSInB2VFAUEACyInB2VEiwBMUIwBiwEpUEmMACInCWVFAUyMAUEACyInCWVEiwBMUIwBiwEpUEmMACInCmVFAUyMAUEACyInCmVEiwBMUIwBiwGMAIk=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TrueRoots contract
 */
export type TrueRootsArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(byte[],byte[],byte[],uint64,uint64)void': {
      admin: Uint8Array
      lab: Uint8Array
      proc: Uint8Array
      rewardAsa: bigint | number
      baseReward: bigint | number
    }
    'create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void': {
      batchId: Uint8Array
      collector: Uint8Array
      collectedAt: bigint | number
      geo: Uint8Array
      species: Uint8Array
      quantityKg: bigint | number
    }
    'verify_qc(byte[],uint64,uint64)void': {
      labCertCid: Uint8Array
      authenticityScore: bigint | number
      qcAt: bigint | number
    }
    'process_batch(byte[],byte[],uint64)void': {
      finalImgCid: Uint8Array
      consumerQr: Uint8Array
      procAt: bigint | number
    }
    'ship_batch()void': Record<string, never>
    'reward_distributed()void': Record<string, never>
    'update_auth(byte[],byte[],uint64)void': {
      newLab: Uint8Array
      newProc: Uint8Array
      newBaseReward: bigint | number
    }
    'provenance()byte[]': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(byte[],byte[],byte[],uint64,uint64)void': [admin: Uint8Array, lab: Uint8Array, proc: Uint8Array, rewardAsa: bigint | number, baseReward: bigint | number]
    'create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void': [batchId: Uint8Array, collector: Uint8Array, collectedAt: bigint | number, geo: Uint8Array, species: Uint8Array, quantityKg: bigint | number]
    'verify_qc(byte[],uint64,uint64)void': [labCertCid: Uint8Array, authenticityScore: bigint | number, qcAt: bigint | number]
    'process_batch(byte[],byte[],uint64)void': [finalImgCid: Uint8Array, consumerQr: Uint8Array, procAt: bigint | number]
    'ship_batch()void': []
    'reward_distributed()void': []
    'update_auth(byte[],byte[],uint64)void': [newLab: Uint8Array, newProc: Uint8Array, newBaseReward: bigint | number]
    'provenance()byte[]': []
  }
}

/**
 * The return type for each method
 */
export type TrueRootsReturns = {
  'createApplication(byte[],byte[],byte[],uint64,uint64)void': void
  'create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void': void
  'verify_qc(byte[],uint64,uint64)void': void
  'process_batch(byte[],byte[],uint64)void': void
  'ship_batch()void': void
  'reward_distributed()void': void
  'update_auth(byte[],byte[],uint64)void': void
  'provenance()byte[]': Uint8Array
}

/**
 * Defines the types of available calls and state of the TrueRoots smart contract.
 */
export type TrueRootsTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(byte[],byte[],byte[],uint64,uint64)void' | 'createApplication', {
      argsObj: TrueRootsArgs['obj']['createApplication(byte[],byte[],byte[],uint64,uint64)void']
      argsTuple: TrueRootsArgs['tuple']['createApplication(byte[],byte[],byte[],uint64,uint64)void']
      returns: TrueRootsReturns['createApplication(byte[],byte[],byte[],uint64,uint64)void']
    }>
    & Record<'create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void' | 'create_batch', {
      argsObj: TrueRootsArgs['obj']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void']
      argsTuple: TrueRootsArgs['tuple']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void']
      returns: TrueRootsReturns['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void']
    }>
    & Record<'verify_qc(byte[],uint64,uint64)void' | 'verify_qc', {
      argsObj: TrueRootsArgs['obj']['verify_qc(byte[],uint64,uint64)void']
      argsTuple: TrueRootsArgs['tuple']['verify_qc(byte[],uint64,uint64)void']
      returns: TrueRootsReturns['verify_qc(byte[],uint64,uint64)void']
    }>
    & Record<'process_batch(byte[],byte[],uint64)void' | 'process_batch', {
      argsObj: TrueRootsArgs['obj']['process_batch(byte[],byte[],uint64)void']
      argsTuple: TrueRootsArgs['tuple']['process_batch(byte[],byte[],uint64)void']
      returns: TrueRootsReturns['process_batch(byte[],byte[],uint64)void']
    }>
    & Record<'ship_batch()void' | 'ship_batch', {
      argsObj: TrueRootsArgs['obj']['ship_batch()void']
      argsTuple: TrueRootsArgs['tuple']['ship_batch()void']
      returns: TrueRootsReturns['ship_batch()void']
    }>
    & Record<'reward_distributed()void' | 'reward_distributed', {
      argsObj: TrueRootsArgs['obj']['reward_distributed()void']
      argsTuple: TrueRootsArgs['tuple']['reward_distributed()void']
      returns: TrueRootsReturns['reward_distributed()void']
    }>
    & Record<'update_auth(byte[],byte[],uint64)void' | 'update_auth', {
      argsObj: TrueRootsArgs['obj']['update_auth(byte[],byte[],uint64)void']
      argsTuple: TrueRootsArgs['tuple']['update_auth(byte[],byte[],uint64)void']
      returns: TrueRootsReturns['update_auth(byte[],byte[],uint64)void']
    }>
    & Record<'provenance()byte[]' | 'provenance', {
      argsObj: TrueRootsArgs['obj']['provenance()byte[]']
      argsTuple: TrueRootsArgs['tuple']['provenance()byte[]']
      returns: TrueRootsReturns['provenance()byte[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: BinaryState
        authLab: BinaryState
        authProc: BinaryState
        rewardAsa: bigint
        baseReward: bigint
        rewardDone: bigint
        batchId: BinaryState
        collector: BinaryState
        collectedAt: bigint
        geo: BinaryState
        species: BinaryState
        quantityKg: bigint
        status: BinaryState
        labCertCid: BinaryState
        qcAt: bigint
        authenticityScore: bigint
        processor: BinaryState
        procAt: bigint
        finalImgCid: BinaryState
        consumerQr: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TrueRootsSignatures = keyof TrueRootsTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TrueRootsNonVoidMethodSignatures = keyof TrueRootsTypes['methods'] extends infer T ? T extends keyof TrueRootsTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TrueRoots smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TrueRootsSignatures> = TrueRootsTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TrueRoots smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TrueRootsSignatures> = TrueRootsTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TrueRootsTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TrueRootsCreateCallParams =
  | Expand<CallParams<TrueRootsArgs['obj']['createApplication(byte[],byte[],byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['createApplication(byte[],byte[],byte[],uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TrueRootsArgs['obj']['createApplication(byte[],byte[],byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['createApplication(byte[],byte[],byte[],uint64,uint64)void']> & {method: 'createApplication(byte[],byte[],byte[],uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TrueRootsDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TrueRootsCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TrueRoots smart contract
 */
export abstract class TrueRootsParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TrueRootsCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(byte[],byte[],byte[],uint64,uint64)void':
            return TrueRootsParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the TrueRoots smart contract using the createApplication(byte[],byte[],byte[],uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TrueRootsArgs['obj']['createApplication(byte[],byte[],byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['createApplication(byte[],byte[],byte[],uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(byte[],byte[],byte[],uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin, params.args.lab, params.args.proc, params.args.rewardAsa, params.args.baseReward],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void ABI method
   *
   * Create a new batch (only once in this simplified version).
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBatch(params: CallParams<TrueRootsArgs['obj']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.batchId, params.args.collector, params.args.collectedAt, params.args.geo, params.args.species, params.args.quantityKg],
    }
  }
  /**
   * Constructs a no op call for the verify_qc(byte[],uint64,uint64)void ABI method
   *
   * Lab verification
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifyQc(params: CallParams<TrueRootsArgs['obj']['verify_qc(byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['verify_qc(byte[],uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verify_qc(byte[],uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.labCertCid, params.args.authenticityScore, params.args.qcAt],
    }
  }
  /**
   * Constructs a no op call for the process_batch(byte[],byte[],uint64)void ABI method
   *
   * Processing step
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static processBatch(params: CallParams<TrueRootsArgs['obj']['process_batch(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['process_batch(byte[],byte[],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'process_batch(byte[],byte[],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.finalImgCid, params.args.consumerQr, params.args.procAt],
    }
  }
  /**
   * Constructs a no op call for the ship_batch()void ABI method
   *
   * Mark shipped
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static shipBatch(params: CallParams<TrueRootsArgs['obj']['ship_batch()void'] | TrueRootsArgs['tuple']['ship_batch()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'ship_batch()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the reward_distributed()void ABI method
   *
   * Mark rewards distributed (ASA transfer done in grouped txn externally)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static rewardDistributed(params: CallParams<TrueRootsArgs['obj']['reward_distributed()void'] | TrueRootsArgs['tuple']['reward_distributed()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reward_distributed()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the update_auth(byte[],byte[],uint64)void ABI method
   *
   * Update roles / base reward
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAuth(params: CallParams<TrueRootsArgs['obj']['update_auth(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['update_auth(byte[],byte[],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_auth(byte[],byte[],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newLab, params.args.newProc, params.args.newBaseReward],
    }
  }
  /**
   * Constructs a no op call for the provenance()byte[] ABI method
   *
   * Read-only provenance snapshot (concatenate selected fields); frontend decodes
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static provenance(params: CallParams<TrueRootsArgs['obj']['provenance()byte[]'] | TrueRootsArgs['tuple']['provenance()byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'provenance()byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TrueRoots smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TrueRootsFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TrueRootsFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TrueRootsClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TrueRootsClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TrueRoots smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TrueRootsDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TrueRootsParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TrueRootsCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TrueRootsClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TrueRoots smart contract using the createApplication(byte[],byte[],byte[],uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TrueRootsArgs['obj']['createApplication(byte[],byte[],byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['createApplication(byte[],byte[],byte[],uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(TrueRootsParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TrueRoots smart contract using the createApplication(byte[],byte[],byte[],uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TrueRootsArgs['obj']['createApplication(byte[],byte[],byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['createApplication(byte[],byte[],byte[],uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(TrueRootsParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TrueRoots smart contract using an ABI method call using the createApplication(byte[],byte[],byte[],uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TrueRootsArgs['obj']['createApplication(byte[],byte[],byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['createApplication(byte[],byte[],byte[],uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(TrueRootsParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TrueRootsReturns['createApplication(byte[],byte[],byte[],uint64,uint64)void']) }, appClient: new TrueRootsClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TrueRoots smart contract
 */
export class TrueRootsClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TrueRootsClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TrueRoots app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TrueRootsClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TrueRootsNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TrueRootsClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TrueRootsClient> {
    return new TrueRootsClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TrueRootsClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TrueRootsClient> {
    return new TrueRootsClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TrueRoots smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void` ABI method.
     *
     * Create a new batch (only once in this simplified version).
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBatch: (params: CallParams<TrueRootsArgs['obj']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrueRootsParamsFactory.createBatch(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `verify_qc(byte[],uint64,uint64)void` ABI method.
     *
     * Lab verification
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifyQc: (params: CallParams<TrueRootsArgs['obj']['verify_qc(byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['verify_qc(byte[],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrueRootsParamsFactory.verifyQc(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `process_batch(byte[],byte[],uint64)void` ABI method.
     *
     * Processing step
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    processBatch: (params: CallParams<TrueRootsArgs['obj']['process_batch(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['process_batch(byte[],byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrueRootsParamsFactory.processBatch(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `ship_batch()void` ABI method.
     *
     * Mark shipped
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    shipBatch: (params: CallParams<TrueRootsArgs['obj']['ship_batch()void'] | TrueRootsArgs['tuple']['ship_batch()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TrueRootsParamsFactory.shipBatch(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `reward_distributed()void` ABI method.
     *
     * Mark rewards distributed (ASA transfer done in grouped txn externally)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    rewardDistributed: (params: CallParams<TrueRootsArgs['obj']['reward_distributed()void'] | TrueRootsArgs['tuple']['reward_distributed()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TrueRootsParamsFactory.rewardDistributed(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `update_auth(byte[],byte[],uint64)void` ABI method.
     *
     * Update roles / base reward
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAuth: (params: CallParams<TrueRootsArgs['obj']['update_auth(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['update_auth(byte[],byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrueRootsParamsFactory.updateAuth(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `provenance()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Read-only provenance snapshot (concatenate selected fields); frontend decodes
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    provenance: (params: CallParams<TrueRootsArgs['obj']['provenance()byte[]'] | TrueRootsArgs['tuple']['provenance()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TrueRootsParamsFactory.provenance(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TrueRoots smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void` ABI method.
     *
     * Create a new batch (only once in this simplified version).
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBatch: (params: CallParams<TrueRootsArgs['obj']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrueRootsParamsFactory.createBatch(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `verify_qc(byte[],uint64,uint64)void` ABI method.
     *
     * Lab verification
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifyQc: (params: CallParams<TrueRootsArgs['obj']['verify_qc(byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['verify_qc(byte[],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrueRootsParamsFactory.verifyQc(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `process_batch(byte[],byte[],uint64)void` ABI method.
     *
     * Processing step
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    processBatch: (params: CallParams<TrueRootsArgs['obj']['process_batch(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['process_batch(byte[],byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrueRootsParamsFactory.processBatch(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `ship_batch()void` ABI method.
     *
     * Mark shipped
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    shipBatch: (params: CallParams<TrueRootsArgs['obj']['ship_batch()void'] | TrueRootsArgs['tuple']['ship_batch()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TrueRootsParamsFactory.shipBatch(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `reward_distributed()void` ABI method.
     *
     * Mark rewards distributed (ASA transfer done in grouped txn externally)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    rewardDistributed: (params: CallParams<TrueRootsArgs['obj']['reward_distributed()void'] | TrueRootsArgs['tuple']['reward_distributed()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TrueRootsParamsFactory.rewardDistributed(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `update_auth(byte[],byte[],uint64)void` ABI method.
     *
     * Update roles / base reward
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAuth: (params: CallParams<TrueRootsArgs['obj']['update_auth(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['update_auth(byte[],byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrueRootsParamsFactory.updateAuth(params))
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `provenance()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Read-only provenance snapshot (concatenate selected fields); frontend decodes
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    provenance: (params: CallParams<TrueRootsArgs['obj']['provenance()byte[]'] | TrueRootsArgs['tuple']['provenance()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TrueRootsParamsFactory.provenance(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TrueRoots smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void` ABI method.
     *
     * Create a new batch (only once in this simplified version).
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBatch: async (params: CallParams<TrueRootsArgs['obj']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrueRootsParamsFactory.createBatch(params))
      return {...result, return: result.return as unknown as (undefined | TrueRootsReturns['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void'])}
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `verify_qc(byte[],uint64,uint64)void` ABI method.
     *
     * Lab verification
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifyQc: async (params: CallParams<TrueRootsArgs['obj']['verify_qc(byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['verify_qc(byte[],uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrueRootsParamsFactory.verifyQc(params))
      return {...result, return: result.return as unknown as (undefined | TrueRootsReturns['verify_qc(byte[],uint64,uint64)void'])}
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `process_batch(byte[],byte[],uint64)void` ABI method.
     *
     * Processing step
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    processBatch: async (params: CallParams<TrueRootsArgs['obj']['process_batch(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['process_batch(byte[],byte[],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrueRootsParamsFactory.processBatch(params))
      return {...result, return: result.return as unknown as (undefined | TrueRootsReturns['process_batch(byte[],byte[],uint64)void'])}
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `ship_batch()void` ABI method.
     *
     * Mark shipped
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    shipBatch: async (params: CallParams<TrueRootsArgs['obj']['ship_batch()void'] | TrueRootsArgs['tuple']['ship_batch()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TrueRootsParamsFactory.shipBatch(params))
      return {...result, return: result.return as unknown as (undefined | TrueRootsReturns['ship_batch()void'])}
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `reward_distributed()void` ABI method.
     *
     * Mark rewards distributed (ASA transfer done in grouped txn externally)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    rewardDistributed: async (params: CallParams<TrueRootsArgs['obj']['reward_distributed()void'] | TrueRootsArgs['tuple']['reward_distributed()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TrueRootsParamsFactory.rewardDistributed(params))
      return {...result, return: result.return as unknown as (undefined | TrueRootsReturns['reward_distributed()void'])}
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `update_auth(byte[],byte[],uint64)void` ABI method.
     *
     * Update roles / base reward
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAuth: async (params: CallParams<TrueRootsArgs['obj']['update_auth(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['update_auth(byte[],byte[],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrueRootsParamsFactory.updateAuth(params))
      return {...result, return: result.return as unknown as (undefined | TrueRootsReturns['update_auth(byte[],byte[],uint64)void'])}
    },

    /**
     * Makes a call to the TrueRoots smart contract using the `provenance()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Read-only provenance snapshot (concatenate selected fields); frontend decodes
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    provenance: async (params: CallParams<TrueRootsArgs['obj']['provenance()byte[]'] | TrueRootsArgs['tuple']['provenance()byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TrueRootsParamsFactory.provenance(params))
      return {...result, return: result.return as unknown as (undefined | TrueRootsReturns['provenance()byte[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TrueRootsClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the TrueRoots smart contract using the `provenance()byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Read-only provenance snapshot (concatenate selected fields); frontend decodes
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async provenance(params: CallParams<TrueRootsArgs['obj']['provenance()byte[]'] | TrueRootsArgs['tuple']['provenance()byte[]']> = {args: []}) {
    const result = await this.appClient.send.call(TrueRootsParamsFactory.provenance(params))
    return result.return as unknown as TrueRootsReturns['provenance()byte[]']
  }

  /**
   * Methods to access state for the current TrueRoots app
   */
  state = {
    /**
     * Methods to access global state for the current TrueRoots app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
          authLab: new BinaryStateValue(result.auth_lab),
          authProc: new BinaryStateValue(result.auth_proc),
          rewardAsa: result.reward_asa,
          baseReward: result.base_reward,
          rewardDone: result.reward_done,
          batchId: new BinaryStateValue(result.batch_id),
          collector: new BinaryStateValue(result.collector),
          collectedAt: result.collected_at,
          geo: new BinaryStateValue(result.geo),
          species: new BinaryStateValue(result.species),
          quantityKg: result.quantity_kg,
          status: new BinaryStateValue(result.status),
          labCertCid: new BinaryStateValue(result.lab_cert_cid),
          qcAt: result.qc_at,
          authenticityScore: result.authenticity_score,
          processor: new BinaryStateValue(result.processor),
          procAt: result.proc_at,
          finalImgCid: new BinaryStateValue(result.final_img_cid),
          consumerQr: new BinaryStateValue(result.consumer_qr),
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the auth_lab key in global state
       */
      authLab: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("auth_lab")) as Uint8Array | undefined) },
      /**
       * Get the current value of the auth_proc key in global state
       */
      authProc: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("auth_proc")) as Uint8Array | undefined) },
      /**
       * Get the current value of the reward_asa key in global state
       */
      rewardAsa: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reward_asa")) as bigint | undefined },
      /**
       * Get the current value of the base_reward key in global state
       */
      baseReward: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("base_reward")) as bigint | undefined },
      /**
       * Get the current value of the reward_done key in global state
       */
      rewardDone: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reward_done")) as bigint | undefined },
      /**
       * Get the current value of the batch_id key in global state
       */
      batchId: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("batch_id")) as Uint8Array | undefined) },
      /**
       * Get the current value of the collector key in global state
       */
      collector: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("collector")) as Uint8Array | undefined) },
      /**
       * Get the current value of the collected_at key in global state
       */
      collectedAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("collected_at")) as bigint | undefined },
      /**
       * Get the current value of the geo key in global state
       */
      geo: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("geo")) as Uint8Array | undefined) },
      /**
       * Get the current value of the species key in global state
       */
      species: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("species")) as Uint8Array | undefined) },
      /**
       * Get the current value of the quantity_kg key in global state
       */
      quantityKg: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("quantity_kg")) as bigint | undefined },
      /**
       * Get the current value of the status key in global state
       */
      status: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("status")) as Uint8Array | undefined) },
      /**
       * Get the current value of the lab_cert_cid key in global state
       */
      labCertCid: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("lab_cert_cid")) as Uint8Array | undefined) },
      /**
       * Get the current value of the qc_at key in global state
       */
      qcAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("qc_at")) as bigint | undefined },
      /**
       * Get the current value of the authenticity_score key in global state
       */
      authenticityScore: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("authenticity_score")) as bigint | undefined },
      /**
       * Get the current value of the processor key in global state
       */
      processor: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("processor")) as Uint8Array | undefined) },
      /**
       * Get the current value of the proc_at key in global state
       */
      procAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proc_at")) as bigint | undefined },
      /**
       * Get the current value of the final_img_cid key in global state
       */
      finalImgCid: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("final_img_cid")) as Uint8Array | undefined) },
      /**
       * Get the current value of the consumer_qr key in global state
       */
      consumerQr: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("consumer_qr")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): TrueRootsComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void method call against the TrueRoots contract
       */
      createBatch(params: CallParams<TrueRootsArgs['obj']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBatch(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a verify_qc(byte[],uint64,uint64)void method call against the TrueRoots contract
       */
      verifyQc(params: CallParams<TrueRootsArgs['obj']['verify_qc(byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['verify_qc(byte[],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifyQc(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a process_batch(byte[],byte[],uint64)void method call against the TrueRoots contract
       */
      processBatch(params: CallParams<TrueRootsArgs['obj']['process_batch(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['process_batch(byte[],byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.processBatch(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a ship_batch()void method call against the TrueRoots contract
       */
      shipBatch(params: CallParams<TrueRootsArgs['obj']['ship_batch()void'] | TrueRootsArgs['tuple']['ship_batch()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.shipBatch(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reward_distributed()void method call against the TrueRoots contract
       */
      rewardDistributed(params: CallParams<TrueRootsArgs['obj']['reward_distributed()void'] | TrueRootsArgs['tuple']['reward_distributed()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.rewardDistributed(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_auth(byte[],byte[],uint64)void method call against the TrueRoots contract
       */
      updateAuth(params: CallParams<TrueRootsArgs['obj']['update_auth(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['update_auth(byte[],byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAuth(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a provenance()byte[] method call against the TrueRoots contract
       */
      provenance(params: CallParams<TrueRootsArgs['obj']['provenance()byte[]'] | TrueRootsArgs['tuple']['provenance()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.provenance(params)))
        resultMappers.push((v) => client.decodeReturnValue('provenance()byte[]', v))
        return this
      },
      /**
       * Add a clear state call to the TrueRoots contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TrueRootsComposer
  }
}
export type TrueRootsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void ABI method.
   *
   * Create a new batch (only once in this simplified version).
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBatch(params?: CallParams<TrueRootsArgs['obj']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void']>): TrueRootsComposer<[...TReturns, TrueRootsReturns['create_batch(byte[],byte[],uint64,byte[],byte[],uint64)void'] | undefined]>

  /**
   * Calls the verify_qc(byte[],uint64,uint64)void ABI method.
   *
   * Lab verification
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyQc(params?: CallParams<TrueRootsArgs['obj']['verify_qc(byte[],uint64,uint64)void'] | TrueRootsArgs['tuple']['verify_qc(byte[],uint64,uint64)void']>): TrueRootsComposer<[...TReturns, TrueRootsReturns['verify_qc(byte[],uint64,uint64)void'] | undefined]>

  /**
   * Calls the process_batch(byte[],byte[],uint64)void ABI method.
   *
   * Processing step
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  processBatch(params?: CallParams<TrueRootsArgs['obj']['process_batch(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['process_batch(byte[],byte[],uint64)void']>): TrueRootsComposer<[...TReturns, TrueRootsReturns['process_batch(byte[],byte[],uint64)void'] | undefined]>

  /**
   * Calls the ship_batch()void ABI method.
   *
   * Mark shipped
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  shipBatch(params?: CallParams<TrueRootsArgs['obj']['ship_batch()void'] | TrueRootsArgs['tuple']['ship_batch()void']>): TrueRootsComposer<[...TReturns, TrueRootsReturns['ship_batch()void'] | undefined]>

  /**
   * Calls the reward_distributed()void ABI method.
   *
   * Mark rewards distributed (ASA transfer done in grouped txn externally)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rewardDistributed(params?: CallParams<TrueRootsArgs['obj']['reward_distributed()void'] | TrueRootsArgs['tuple']['reward_distributed()void']>): TrueRootsComposer<[...TReturns, TrueRootsReturns['reward_distributed()void'] | undefined]>

  /**
   * Calls the update_auth(byte[],byte[],uint64)void ABI method.
   *
   * Update roles / base reward
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAuth(params?: CallParams<TrueRootsArgs['obj']['update_auth(byte[],byte[],uint64)void'] | TrueRootsArgs['tuple']['update_auth(byte[],byte[],uint64)void']>): TrueRootsComposer<[...TReturns, TrueRootsReturns['update_auth(byte[],byte[],uint64)void'] | undefined]>

  /**
   * Calls the provenance()byte[] ABI method.
   *
   * Read-only provenance snapshot (concatenate selected fields); frontend decodes
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  provenance(params?: CallParams<TrueRootsArgs['obj']['provenance()byte[]'] | TrueRootsArgs['tuple']['provenance()byte[]']>): TrueRootsComposer<[...TReturns, TrueRootsReturns['provenance()byte[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TrueRoots smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TrueRootsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TrueRootsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TrueRootsComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TrueRootsComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TrueRootsComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TrueRootsComposerResults<TReturns>>
}
export type TrueRootsComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

